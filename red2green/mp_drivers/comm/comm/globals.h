////////////////////////////////////////////////////////////////////////////////////////////////////
// TITLE:   comm/globals.h                                                                        //
// AUTHORS: Miki Szmuk                                                                            //
// LAB:     Autonomous Controls Lab (ACL)                                                         //
// LICENSE: Copyright 2016, All Rights Reserved                                                   //
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef COMM_GLOBALS_H
#define COMM_GLOBALS_H

////////////////////////////////////////////////////////////////////////////////////////////////////

#include "utilities/globals.h"

////////////////////////////////////////////////////////////////////////////////////////////////////

#define TOPIC_AHRS comm::meta::AHRS
#define TOPIC_API comm::meta::API
#define TOPIC_DEFAULT comm::meta::DEFAULT
#define TOPIC_DEVICE comm::meta::DEVICE
#define TOPIC_GCS comm::meta::GCS
#define TOPIC_GPS comm::meta::GPS
#define TOPIC_HMC5883L comm::meta::HMC5883L
#define TOPIC_MOCAP comm::meta::MOCAP
#define TOPIC_MPU6050 comm::meta::MPU6050
#define TOPIC_OFFBOARD comm::meta::OFFBOARD
#define TOPIC_ONBOARD comm::meta::ONBOARD
#define TOPIC_QCTRL comm::meta::QCTRL
#define TOPIC_QSIM comm::meta::QSIM
#define TOPIC_SIM comm::meta::SIM

namespace comm {
  class meta {
    public:
      enum PACKET_ID_T {
        ID_AHRS_DATA,
        ID_AHRS_PARAMS,
        ID_AHRS_STATE,
        ID_CTRL_AUTH_MODE,
        ID_HEALTH_STATE,
        ID_HMC5883L_CALIB,
        ID_HMC5883L_CONFIG,
        ID_IMU_DATA,
        ID_IMU_STATE,
        ID_MAG_DATA,
        ID_MAG_STATE,
        ID_MPU6050_CALIB,
        ID_MPU6050_CONFIG,
        ID_MP_AP_BOARD_CONFIG,
        ID_OVERO_CONFIG,
        ID_PCA9685_CALIB,
        ID_PCA9685_CONFIG,
        ID_PID_DATA,
        ID_PID_GAINS,
        ID_POS_DATA,
        ID_PWM_CMD,
        ID_PWM_STATE,
        ID_QCTRL_CMD,
        ID_QCTRL_DATA,
        ID_QCTRL_MODE,
        ID_QCTRL_PARAMS,
        ID_QCTRL_STATE,
        ID_QSIM_DATA,
        ID_QSIM_PARAMS,
        ID_QSIM_STATE,
        ID_QUAT,
        PACKET_ID_BEGIN=ID_AHRS_DATA,
        PACKET_ID_END=ID_QUAT
      };
      enum TOPIC_T {
        AHRS,
        API,
        DEFAULT,
        DEVICE,
        GCS,
        GPS,
        HMC5883L,
        MOCAP,
        MPU6050,
        OFFBOARD,
        ONBOARD,
        QCTRL,
        QSIM,
        SIM,
        TOPIC_BEGIN=AHRS,
        TOPIC_END=SIM
      };
      enum NODE_ID_T {
        NODE_000,
        NODE_001,
        NODE_002,
        NODE_003,
        NODE_004,
        NODE_005,
        NODE_006,
        NODE_007,
        NODE_008,
        NODE_009,
        NODE_010,
        NODE_011,
        NODE_012,
        NODE_013,
        NODE_014,
        NODE_015,
        NODE_016,
        NODE_017,
        NODE_018,
        NODE_019,
        NODE_020,
        NODE_021,
        NODE_022,
        NODE_023,
        NODE_024,
        NODE_025,
        NODE_026,
        NODE_027,
        NODE_028,
        NODE_029,
        NODE_030,
        NODE_031,
        NODE_032,
        NODE_033,
        NODE_034,
        NODE_035,
        NODE_036,
        NODE_037,
        NODE_038,
        NODE_039,
        NODE_040,
        NODE_041,
        NODE_042,
        NODE_043,
        NODE_044,
        NODE_045,
        NODE_046,
        NODE_047,
        NODE_048,
        NODE_049,
        NODE_050,
        NODE_051,
        NODE_052,
        NODE_053,
        NODE_054,
        NODE_055,
        NODE_056,
        NODE_057,
        NODE_058,
        NODE_059,
        NODE_060,
        NODE_061,
        NODE_062,
        NODE_063,
        NODE_064,
        NODE_065,
        NODE_066,
        NODE_067,
        NODE_068,
        NODE_069,
        NODE_070,
        NODE_071,
        NODE_072,
        NODE_073,
        NODE_074,
        NODE_075,
        NODE_076,
        NODE_077,
        NODE_078,
        NODE_079,
        NODE_080,
        NODE_081,
        NODE_082,
        NODE_083,
        NODE_084,
        NODE_085,
        NODE_086,
        NODE_087,
        NODE_088,
        NODE_089,
        NODE_090,
        NODE_091,
        NODE_092,
        NODE_093,
        NODE_094,
        NODE_095,
        NODE_096,
        NODE_097,
        NODE_098,
        NODE_099,
        NODE_100,
        NODE_101,
        NODE_102,
        NODE_103,
        NODE_104,
        NODE_105,
        NODE_106,
        NODE_107,
        NODE_108,
        NODE_109,
        NODE_110,
        NODE_111,
        NODE_112,
        NODE_113,
        NODE_114,
        NODE_115,
        NODE_116,
        NODE_117,
        NODE_118,
        NODE_119,
        NODE_120,
        NODE_121,
        NODE_122,
        NODE_123,
        NODE_124,
        NODE_125,
        NODE_126,
        NODE_127,
        NODE_128,
        NODE_129,
        NODE_130,
        NODE_131,
        NODE_132,
        NODE_133,
        NODE_134,
        NODE_135,
        NODE_136,
        NODE_137,
        NODE_138,
        NODE_139,
        NODE_140,
        NODE_141,
        NODE_142,
        NODE_143,
        NODE_144,
        NODE_145,
        NODE_146,
        NODE_147,
        NODE_148,
        NODE_149,
        NODE_150,
        NODE_151,
        NODE_152,
        NODE_153,
        NODE_154,
        NODE_155,
        NODE_156,
        NODE_157,
        NODE_158,
        NODE_159,
        NODE_160,
        NODE_161,
        NODE_162,
        NODE_163,
        NODE_164,
        NODE_165,
        NODE_166,
        NODE_167,
        NODE_168,
        NODE_169,
        NODE_170,
        NODE_171,
        NODE_172,
        NODE_173,
        NODE_174,
        NODE_175,
        NODE_176,
        NODE_177,
        NODE_178,
        NODE_179,
        NODE_180,
        NODE_181,
        NODE_182,
        NODE_183,
        NODE_184,
        NODE_185,
        NODE_186,
        NODE_187,
        NODE_188,
        NODE_189,
        NODE_190,
        NODE_191,
        NODE_192,
        NODE_193,
        NODE_194,
        NODE_195,
        NODE_196,
        NODE_197,
        NODE_198,
        NODE_199,
        NODE_200,
        NODE_201,
        NODE_202,
        NODE_203,
        NODE_204,
        NODE_205,
        NODE_206,
        NODE_207,
        NODE_208,
        NODE_209,
        NODE_210,
        NODE_211,
        NODE_212,
        NODE_213,
        NODE_214,
        NODE_215,
        NODE_216,
        NODE_217,
        NODE_218,
        NODE_219,
        NODE_220,
        NODE_221,
        NODE_222,
        NODE_223,
        NODE_224,
        NODE_225,
        NODE_226,
        NODE_227,
        NODE_228,
        NODE_229,
        NODE_230,
        NODE_231,
        NODE_232,
        NODE_233,
        NODE_234,
        NODE_235,
        NODE_236,
        NODE_237,
        NODE_238,
        NODE_239,
        NODE_240,
        NODE_241,
        NODE_242,
        NODE_243,
        NODE_244,
        NODE_245,
        NODE_246,
        NODE_247,
        NODE_248,
        NODE_249,
        NODE_250,
        NODE_251,
        NODE_252,
        NODE_253,
        NODE_254,
        NODE_255,
        NODE_ID_BEGIN=NODE_000,
        NODE_ID_END=NODE_255
      };

    private:
      static bool s_local_node_id_set;
      static NODE_ID_T s_local_node_id;

    public:
      static std::string packet_id_label(PACKET_ID_T i);
      static std::string topic_label(TOPIC_T i);
      static std::string node_id_label(NODE_ID_T i);
      static void set_local_node_id(NODE_ID_T i);
      static NODE_ID_T local_node_id();
  };
}

////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
